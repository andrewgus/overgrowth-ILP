body[id*='lesson'] {
  background-color: var(--lightGray);
}
article.section {
  min-height: 90vh;
  padding: 0 var(--s-2);
  display: grid;
  grid-template-columns:
    auto [content-start] minmax(auto, 10ch) [innerContent-start] minmax(auto, 60ch)
    [innerContent-end] minmax(auto, 10ch) [content-end] auto;
  align-content: start;
  background-color: var(--white);
  padding: max(var(--s8), 3ch) max(var(--s-2), 1ch);
  @supports (min-height: 1svh) {
      min-height: 90svh
  }
  &.isLocked {
    display: none;
  }
  &.firstSection {
    border-radius: 0 0 var(--s2) var(--s2);
  }
  &:not(.firstSection) {
    margin-top: var(--s-5);  
    border-radius: var(--s2);
  }

  &.staticContent {
    // Not section because heading handles that, not details + details because those should be stacked, not .callOutBox because that needs extra margin-top due to large border
     > * + *:not(section):not(details + details):not(.callOutBox) {
      margin-top: var(--s2);
    }

    > img {
      width: 100%;
      margin: var(--s2) 0;
    }
  }
  &.activity {
    padding-bottom: var(--s-2);
    grid-template-rows:
      repeat(3, minmax(auto, max-content))
      [completeBtnBtn-start] 1fr [completeBtn-end];

    > div[class*='activityCompleteBtns'] {
      grid-row: completeBtn-start/completeBtn-end;
      align-self: end;
    }

    >.userActions {
        display: flex;
        flex-flow: column nowrap;
    
        & > label {
          margin-bottom: var(--s0);
        }
    
        > div:not(.visuallyHidden) + div:not(.visuallyHidden) {
          margin-top: var(--s6);
        }
    }
  }
  hr {
    max-width: 100%;
    width: 100%;
    margin: var(--s2) 0;
    border-color: var(--darkGray);
  }

  > *:not(.fullWidth),
  > astro-island > *:not(.fullWidth) {
    grid-column: innerContent-start / innerContent-end;
  }
  > *.fullWidth,
  > astro-island > *.fullWidth {
    grid-column: content-start / content-end;
  }
  @media only screen and (max-width: 80ch) {
    > *:not(.fullWidth),
    > astro-island > *:not(.fullWidth) {
      grid-column: content-start / content-end;
    }
    > * {
      flex-flow: column nowrap;
    }
  }
}