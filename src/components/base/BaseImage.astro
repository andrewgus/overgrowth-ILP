---
type Props = {
	imgName: string
	altText?: string
	describedBy?: string
	labelledby?: string
}

const { imgName, altText = '', describedBy, labelledby } = Astro.props

const imageFilePath = `https://fscjcel.blob.core.windows.net/ilp-assets/${Astro.url.pathname
	.split('/')
	.at(3)}`
---

{
	() => {
		const imgAttributes: { [key: string]: any } = {}
		imgAttributes.alt = altText
		!!describedBy && (imgAttributes['aria-describedby'] = describedBy)
		!!labelledby && (imgAttributes['aria-labelledby'] = labelledby)
		imgAttributes.role = !!altText ? 'img' : 'presentation'

		if (imgName.includes('.svg')) {
			return (
				<img
					src={`${imageFilePath}_${imgName}`}
					{...imgAttributes}
				/>
			)
		} else {
			return (
				<picture>
					<source
						type='image/avif'
						srcset={`${imageFilePath}_${imgName.split('.').at(0)}.avif`}
					/>
					<source
						type='image/webp'
						srcset={`${imageFilePath}_${imgName.split('.').at(0)}.webp`}
					/>
					<source
						type={`image/${imgName.split('.').at(-1)}`}
						srcset={`${imageFilePath}_${imgName}`}
					/>
					<img
						src={`${imageFilePath}_${imgName}`}
						{...imgAttributes}
						decoding='async'
						loading='lazy'
					/>
				</picture>
			)
		}
	}
}

<style lang='scss'>
	picture {
		width: inherit;
		max-width: 100%;
		max-height: 85vh;
		@supports (max-height: 1svh) {
			max-height: 85svh;
		}
		> img {
			object-fit: contain;
			width: auto;
			max-width: inherit;
			max-height: inherit;
			display: block;
			margin: 0 auto;
		}
	}
</style>
