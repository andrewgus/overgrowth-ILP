---
// NOTE: sayAloud prop to be used when descriptor is CRITICAL to the content. For example, the sentence: "To quote George Washington: 'Four Score and <strong>Seven Years</strong> ago,'[Emphasis added]" would need the SayAloud prop so screens readers understand where emphasis was added. The strong emphasis, itself, is critical to the content. If descriptor is not critical, then sayAloud is not necessary.
type Props = {
	setType:
		| 'strong emphasis'
		| 'emphasis'
		| 'highlight'
		| 'inline quote'
		| 'blockquote'
		| 'strikethrough text'
		| 'insert text'
	sayAloud?: boolean
	setHighlightColor?: 'green' | 'red' | 'yellow' | 'blue'
}
const { setType, sayAloud = false, setHighlightColor = 'yellow' } = Astro.props
---

{
	async () => {
		const convertedType = {
			'strong emphasis': 'strong',
			emphasis: 'em',
			highlight: 'mark',
			'inline quote': 'q',
			blockquote: 'blockquote',
			'strikethrough text': 'del',
			'insert text': 'ins',
		}[setType]

		const createVisuallyHiddenText = (a11yText: string, isBefore: boolean) => {
			return isBefore
				? `<span class="visuallyHidden">${a11yText}:&nbsp;</span>`
				: `<span class="visuallyHidden">;&nbsp;end ${a11yText}</span>`
		}
		const visuallyHiddenText = {
			'strong emphasis': [
				createVisuallyHiddenText('important', true),
				createVisuallyHiddenText('important', false),
			],
			emphasis: [
				createVisuallyHiddenText('note', true),
				createVisuallyHiddenText('note', false),
			],
			highlight: [
				createVisuallyHiddenText('highlight begin', true),
				createVisuallyHiddenText('highlight', false),
			],
			'inline quote': [
				createVisuallyHiddenText('quote begin', true),
				createVisuallyHiddenText('quote', false),
			],
			blockquote: '',
			'strikethrough text': createVisuallyHiddenText('was', true),
			'insert text': createVisuallyHiddenText('now', true),
		}[setType]

		const determineSayAloud = {
			'strong emphasis': sayAloud,
			emphasis: sayAloud,
			highlight: sayAloud,
			'inline quote': true,
			blockquote: false,
			'strikethrough text': true,
			'insert text': true,
		}[setType]

		const [wrapperStart, wrapperEnd] = [
			`<${convertedType} ${
				setHighlightColor ? `class="highlight${setHighlightColor}"` : ''
			}>`,
			`</${convertedType}>`,
		]

		let slotContent = ''
		if (Astro.slots.has('default')) {
			slotContent = await Astro.slots.render('default')
		}

		const html = `${wrapperStart}${
			determineSayAloud
				? Array.isArray(visuallyHiddenText)
					? visuallyHiddenText[0]
					: visuallyHiddenText
				: ''
		}${slotContent.trim()}${
			determineSayAloud
				? Array.isArray(visuallyHiddenText)
					? visuallyHiddenText[1]
					: ''
				: ''
		}${wrapperEnd}`

		return <Fragment set:html={html} />
	}
}
