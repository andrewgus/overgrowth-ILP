---
// NOTE: sayAloud prop to be used when descriptor is CRITICAL to the content. For example, the sentence: "To quote George Washington: 'Four Score and <strong>Seven Years</strong> ago,'[Emphasis added]" would need the SayAloud prop so screens readers understand where emphasis was added. The strong emphasis, itself, is critical to the content. If descriptor is not critical, then sayAloud is not necessary.

type Props = {
	setType:
		| 'strong emphasis'
		| 'emphasis'
		| 'highlight'
		| 'inline quote'
		| 'blockquote'
		| 'strikethrough text'
		| 'insert text'
	sayAloud?: boolean
	setHighlightColor?: 'green' | 'red' | 'yellow' | 'blue'
}
const {
	setType,
	sayAloud = false,
	setHighlightColor = setType === 'highlight' ? 'yellow' : undefined,
} = Astro.props
---

{
	async () => {
		const createVisuallyHiddenText = (a11yText: string, isBefore: boolean) => {
			// Always added before, but only added after if not strong or em
			return isBefore
				? `<span class="visuallyHidden">${a11yText}:&nbsp;</span>`
				: `<span class="visuallyHidden">;&nbsp;end ${a11yText}</span>`
		}

		const visuallyHiddenText = {
			// determine what the hidden text will be
			'strong emphasis': createVisuallyHiddenText('important', true),
			emphasis: createVisuallyHiddenText('note', true),
			highlight: [
				createVisuallyHiddenText('highlight begin', true),
				createVisuallyHiddenText('highlight', false),
			],
			'inline quote': [
				createVisuallyHiddenText('quote begin', true),
				createVisuallyHiddenText('quote', false),
			],
			blockquote: '',
			'strikethrough text': createVisuallyHiddenText('was', true),
			'insert text': createVisuallyHiddenText('now', true),
		}[setType]

		const convertedType = {
			// key/value pair between the prop type and element
			'strong emphasis': 'strong',
			emphasis: 'em',
			highlight: 'mark',
			'inline quote': 'q',
			blockquote: 'blockquote',
			'strikethrough text': 'del',
			'insert text': 'ins',
		}[setType]

		const determineSayAloud = {
			// if sayAloud, this requires the prop to be true. If true, will always say aloud.
			'strong emphasis': sayAloud,
			emphasis: sayAloud,
			highlight: sayAloud,
			'inline quote': true,
			blockquote: false,
			'strikethrough text': true,
			'insert text': true,
		}[setType]

		const [wrapperStart, wrapperEnd] = [
			// converting each convertedType into opening/closing elements
			`<${convertedType} ${
				setHighlightColor !== undefined
					? `class="highlight${setHighlightColor}"`
					: ''
			}>`,
			`</${convertedType}>`,
		]

		let slotContent = ''
		if (Astro.slots.has('default')) {
			slotContent = await Astro.slots.render('default')
		}
		// html structure based above components
		const html = `${wrapperStart}${
			determineSayAloud
				? Array.isArray(visuallyHiddenText)
					? visuallyHiddenText[0]
					: visuallyHiddenText
				: ''
		}${slotContent.trim()}${
			determineSayAloud
				? Array.isArray(visuallyHiddenText)
					? visuallyHiddenText[1]
					: ''
				: ''
		}${wrapperEnd}`

		return <Fragment set:html={html} />
	}
}
