---
/**
 * Horizontally-aligned (sans 'alignTop') layout of text and image. Creates a side-by-side layout for the two.
 */
import BaseImage from '../base/BaseImage.astro'
import createNanoID from '../../composables/useCreateNanoID'

type PropsWithIsNewSection =
	| {
			isNewSection?: false | undefined
			title?: undefined
	  }
	| {
			isNewSection?: true
			title: string
	  }

type Props = PropsWithIsNewSection & {
	imgName: string
	altText?: string
	setAlign?: 'alignLeft' | 'alignRight' | 'alignTop'
	setRatio?: 'r5050' | 'r6040'
	isDescribedBy?: boolean
}

const {
	imgName,
	setRatio,
	altText = '',
	setAlign = 'alignLeft',
	isDescribedBy = false,
	isNewSection = false,
	title,
} = Astro.props

const describedByID = createNanoID(Astro.self.name, isDescribedBy)
---

{
	() => {
		const containerStyles = ['fullWidth', 'sideBySide', setAlign, setRatio]
		const layout = (
			<Fragment>
				<div class='stickyImg'>
					<BaseImage
						describedBy={describedByID}
						imgName={imgName}
						altText={altText}
					/>
				</div>
				<div id={describedByID} class='correspondingText'>
					<slot />
				</div>
			</Fragment>
		)
		return isNewSection ? (
			<section class:list={containerStyles}>
				<h3>{title}</h3>
				{layout}
			</section>
		) : (
			<div class:list={containerStyles}>{layout}</div>
		)
	}
}

<style lang='scss'>
	.sideBySide {
		display: flex;
		flex-flow: row wrap;
		gap: var(--s2);

		> h3 {
			width: 100%;
		}
		> .stickyImg {
			display: flex;
			align-items: start;
			justify-content: center;
			width: 100%;
			flex: 1.5;
			> :global(picture) {
				position: sticky;
				top: var(--s7);
				max-height: 85vh;
			}
		}
		> .correspondingText {
			flex: 2;
		}
		&.alignRight {
			.stickyImg {
				order: 2;
			}
			.correspondingText {
				order: 1;
			}
			@media only screen and (max-width: 85ch) {
				.stickyImg {
					order: 1;
				}
				.correspondingText {
					order: 2;
				}
			}
		}
		&.alignTop {
			flex-flow: column nowrap;
			> .stickyImg {
				width: 80ch;

				> :global(picture),
				> :global(img) {
					max-width: inherit;
				}
			}
			> .correspondingText {
				width: 60ch;
				margin: 0 auto;
			}
		}
		&.r6040 {
			.stickyImg {
				flex: 3;
			}
		}
		&.r5050 {
			.stickyImg {
				flex: 1;
			}
			.correspondingText {
				flex: 1;
			}
		}
	}
</style>
