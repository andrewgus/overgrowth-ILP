---
/**
 * Intent is to have an image, fullWidth be shown, and then, with scroll, image with opaque BG scroll over it. Similar to side-by-side, but for larger images.
 */
import BaseImage from '../base/BaseImage.astro'
import { nanoid } from 'nanoid'
type Props = {
	imgName: string
	altText?: string
	align?: 'alignLeft' | 'alignRight' | 'alignCenter'
	needTextDescription?: boolean
}
const {
	imgName,
	altText = '',
	align = 'alignLeft',
	needTextDescription = false,
} = Astro.props

const needID = needTextDescription ? `${Astro.self.name}-${nanoid(8)}` : ''
---

<div class:list={['fullWidth', 'textOverlayImage', align]}>
	<div class='bgImg'>
		<BaseImage describedBy={needID} imgName={imgName} altText={altText} />
	</div>
	<div id={needID} class='overlayText'>
		<slot />
	</div>
</div>

<script>
	window.addEventListener('DOMContentLoaded', () => {
		const containerDiv = document.querySelector(
			'.textOverlayImage'
		) as HTMLDivElement
		const imgContainer = document.querySelector('.bgImg') as HTMLDivElement
		console.log(imgContainer.offsetHeight)

		containerDiv.style.setProperty(
			'--imgHeight',
			`${imgContainer.offsetHeight + 10}px`
		)
	})
</script>

<style lang='scss'>
	@use '../../styles/mixins/accessibility.scss';
	.textOverlayImage {
		--imgHeight: 60vh;
		margin: var(--s2) 0;
		display: flex;
		flex-flow: column nowrap;
		align-items: start;
		justify-content: start;
		min-height: max-content;

		&::after {
			display: block;
			min-height: var(--imgHeight);
			content: '';
		}

		> .bgImg {
			position: sticky;
			top: var(--s7);
			width: 100%;

			> :global(picture) {
				width: inherit;
				max-height: 85vh;

				> :global(img) {
					object-fit: contain;
					width: inherit;
					max-height: inherit;
					width: inherit;
				}
			}
		}

		> .overlayText {
			margin-top: var(--s2);
			align-self: start;
			max-width: 45ch;
			z-index: 1;
			background-color: hsla(0deg, 0%, 100%, 0.7);
			border-radius: 0 var(--s-10) var(--s-10) 0;
			padding: 0 var(--s-2);

			> :global(p) {
				@include accessibility.textDropShadowWhite();
			}
		}
		&.alignRight {
			> .overlayText {
				align-self: end;
			}
		}
		&.alignCenter {
			> .overlayText {
				max-width: 60ch;
				align-self: center;
			}
		}
	}
</style>
