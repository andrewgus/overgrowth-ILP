---
/**
 * Vertically-aligned layout of text and image. Creates an overlay effect where the image is first fully visible, then corresponding text, on scroll, overlays the image, and then, once text is fully scrolled, image is fully visible again.
 */
import BaseImage from '../base/BaseImage.astro'
import createNanoID from '../../composables/useCreateNanoID'
type Props = {
	imgName: string
	altText?: string
	setAlign?: 'alignLeft' | 'alignRight' | 'alignCenter'
	isLongDescForComplexImg?: boolean
}
const {
	imgName,
	altText = '',
	setAlign = 'alignCenter',
	isLongDescForComplexImg = false,
} = Astro.props

const describedByID = createNanoID(Astro.self.name, isLongDescForComplexImg)
---

<script>
	window.addEventListener('load', () => {
		const containerDivs = document.querySelectorAll(
			'.textOverlayImage'
		) as NodeListOf<HTMLDivElement>
		const imgs = [...containerDivs].map(
			(div) => div.querySelector('.overlaidImg img') as HTMLImageElement
		)
		imgs.forEach((img, i) =>
			containerDivs[i].style.setProperty(
				'--imgHeight',
				`min(${img.offsetHeight}px, 85vh)`
			)
		)
	})
</script>

<div class:list={['fullWidth', 'textOverlayImage', setAlign]}>
	<div class='overlaidImg'>
		<BaseImage
			describedBy={describedByID}
			imgName={imgName}
			altText={altText}
		/>
	</div>
	<div id={describedByID} class='overlayText'>
		<slot />
	</div>
</div>

<style lang='scss'>
	@use '../../styles/mixins/a11y.scss';
	.textOverlayImage {
		--imgHeight: 60vh;
		display: flex;
		flex-flow: column nowrap;
		justify-content: start;

		&::after {
			content: '';
			display: block;
			height: calc(var(--imgHeight) + var(--s2));
		}
		> .overlaidImg {
			position: sticky;
			top: var(--s7);
			width: 100%;
		}
		> .overlayText {
			z-index: 1;
			margin-top: var(--s2);
			max-width: 45ch;
			background-color: var(--transparentWhite);
			padding: var(--s-2);
			> :global(p) {
				@include a11y.textDropShadowWhite();
			}
		}
		&.alignCenter {
			> .overlayText {
				border-radius: var(--s-10) var(--s-10);
				max-width: 50ch;
				align-self: center;
			}
		}
		&.alignLeft {
			> .overlayText {
				border-radius: 0 var(--s-10) var(--s-10) 0;
				align-self: start;
			}
		}
		&.alignRight {
			> .overlayText {
				border-radius: var(--s-10) 0 0 var(--s-10);
				align-self: end;
			}
		}
	}
</style>
