---
/**
 * Creates a tabular widget for presenting content
 * NOTE: Make sure to include 'slot={number order here}' on
 */
import createNanoID from '../../../composables/useCreateNanoID'

type Props = {
	title: string
	tabNames: string[]
	isFullWidth?: boolean
}
const { title, tabNames, isFullWidth = false } = Astro.props

const describedByID = createNanoID(Astro.self.name)
---

<script>
	const tabWidgets: NodeListOf<HTMLDivElement> =
		document.querySelectorAll('.tabsWidget')

	const updateTabAttributes = (btn: HTMLButtonElement, isSelected: boolean) => {
		btn.tabIndex = isSelected ? 0 : -1
		btn.setAttribute('aria-selected', isSelected.toString())
	}

	const toggleMatchingPanel = (btnSelected: HTMLButtonElement) => {
		const btnArray = Array.from(
			btnSelected.parentElement!.children
		) as HTMLButtonElement[]
		const tabContentArray = Array.from(
			btnSelected.closest('.tabsWidget')!.querySelectorAll('.tabContent')
		)

		btnArray.forEach((btn) => {
			const isSelected = btn === btnSelected
			updateTabAttributes(btn, isSelected)
		})

		tabContentArray.forEach((content) => {
			const isSelected =
				btnSelected.id === content.getAttribute('aria-labelledby')
			content.classList.toggle('isHidden', !isSelected)
		})
	}

	const handleClick = ({ target }: MouseEvent | FocusEvent) => {
		const btnClicked = target instanceof HTMLButtonElement && target
		if (!btnClicked) return
		toggleMatchingPanel(btnClicked)
	}

	const handleKeyDown = (e: KeyboardEvent) => {
		const btnKeyed = e.target instanceof HTMLButtonElement && e.target
		if (!btnKeyed) return
		const prevBtn = btnKeyed?.previousElementSibling as HTMLButtonElement
		const nextBtn = btnKeyed?.nextElementSibling as HTMLButtonElement

		if (e.key === 'ArrowLeft' && prevBtn) toggleMatchingPanel(prevBtn)
		if (e.key === 'ArrowRight' && nextBtn) toggleMatchingPanel(nextBtn)
	}

	tabWidgets.forEach((widget) => {
		widget.addEventListener('click', handleClick)
		widget.addEventListener('keydown', handleKeyDown)
	})
</script>

<section class:list={['tabsWidget', { fullWidth: isFullWidth }]}>
	<h3 id={describedByID}>{title}</h3>
	<div class='tabs'>
		<div class='tabBtns' role='tablist' aria-describedby={describedByID}>
			{
				tabNames.map((tabName, i) => (
					<button
						id={`tab-${describedByID}-${i}`}
						aria-selected={i === 0 ? true : false}
						aria-controls={`tabpanel-${describedByID}-${i}`}
						type='button'
						role='tab'
						tabindex={i === 0 ? 0 : -1}
					>
						{tabName}
					</button>
				))
			}
		</div>
		{
			tabNames.map((_, i) => (
				<div
					class='tabContent'
					id={`tabpanel-${describedByID}-${i}`}
					role='tabpanel'
					aria-labelledby={`tab-${describedByID}-${i}`}
					class:list={[{ isHidden: i !== 0 }]}
				>
					{async () => {
						let html = ''
						if (Astro.slots.has((i + 1).toString())) {
							html = await Astro.slots.render((i + 1).toString())
						}
						return <Fragment set:html={html} />
					}}
				</div>
			))
		}
	</div>
</section>

<style lang='scss'>
	@use '../../../styles/mixins/buttons.scss';

	.tabs {
		box-shadow: var(--s-10) var(--s-10) var(--s-10) var(--lightGray);
		border-radius: var(--s-5);
		.tabBtns {
			display: flex;
			flex-flow: row wrap;
			justify-content: start;
			align-items: start;

			> button {
				@include buttons.primary();
				border-radius: var(--s-5) var(--s-5) 0 0;
				flex: 1 0 auto;
				min-width: 10ch;

				&[tabindex='0'] {
					text-decoration-line: underline;
					text-decoration-color: var(--blue2);
					text-underline-offset: var(--s-7);
					text-decoration-thickness: var(--s-9);
				}
			}
		}
		.tabContent {
			padding: var(--s-2);
			min-height: 10vh;
			background-color: var(--offWhite);
			border: 1px solid var(--darkGray);
			border-top: 0;
			border-radius: 0 0 var(--s-5) var(--s-5);
		}
	}
	.isHidden {
		display: none;
	}
</style>
