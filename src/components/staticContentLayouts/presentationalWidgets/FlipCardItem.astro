---
type Props = {
	cardFrontContent: string
	cardBackContent: string
	isFlippedProp?: boolean
}
const { cardFrontContent, cardBackContent, isFlippedProp = false } = Astro.props
---

<script>
	const cards = document.querySelectorAll<HTMLDivElement>('.flipCard')

	const flipTheCard = (e: MouseEvent) => {
		const flipCard = e.currentTarget! as HTMLElement
		const cardFront = flipCard.querySelector<HTMLSpanElement>('.cardFront')
		const cardBack = flipCard.querySelector<HTMLSpanElement>('.cardBack')
		const cardInstructions =
			flipCard.querySelector<HTMLSpanElement>('.instructions')

		flipCard.classList.toggle('cardFlipped')
		const isFlipped = flipCard.classList.contains('cardFlipped')

		cardFront?.classList.toggle('isHidden', isFlipped)
		cardBack?.classList.toggle('isHidden', !isFlipped)
		cardInstructions!.style.opacity = '0'
		setTimeout(() => {
			cardInstructions!.style.opacity = '1'
		}, 330)

		cardInstructions!.innerHTML = cardInstructions!.innerHTML.replace(
			/(back|front)/g,
			(match) => {
				return match === 'back' ? 'front' : 'back'
			}
		)
	}

	cards.forEach((card) => {
		card.addEventListener('click', flipTheCard)
	})
</script>

<button class='flipCard' type='button'>
	<span class='cardFront'
		><span class='visuallyHidden'>Flip Card Front:&nbsp;</span>{
			cardFrontContent
		}</span
	>
	<span class='cardBack isHidden'
		><span class='visuallyHidden'>Flip Card Back:&nbsp;</span>{
			cardBackContent
		}</span
	>
	<span class='instructions'
		><span class='visuallyHidden'>Instructions:&nbsp;</span>Flip to back?</span
	>
</button>

<style lang='scss'>
	@use '../../../styles/mixins/buttons.scss';
	@use '../../../styles/mixins/shadows.scss';
	@use '../../../styles/mixins/transitions.scss';
	.flipCard {
		@include buttons.primary();
		@include shadows.blueDropShadow();
		position: relative;
		overflow: hidden;
		border-radius: var(--s-10);
		min-width: 15vh;
		max-width: max-content;
		padding-bottom: var(--s1);
		aspect-ratio: 1/1;

		&:hover {
			> .instructions {
				bottom: 3.5px;
				right: 5px;
			}
		}
		&.cardFlipped {
			transform: rotateY(180deg);
			> span {
				transform: rotateY(-180deg);
				&.instructions {
					border-width: 1px 1px 0 0;
					border-radius: 0 var(--s-10) 0 0;
				}
			}
		}
		> span {
			text-align: left;
			line-height: 1.6;
			-webkit-animation: cardFlipOpacity 0.75s ease-in-out alternate;
			animation: cardFlipOpacity 0.75s ease-in-out alternate;
			&.instructions {
				-webkit-transition: bottom var(--timeShort) ease-in-out,
					right var(--timeShort) ease-in-out;
				transition: bottom var(--timeShort) ease-in-out,
					right var(--timeShort) ease-in-out;
				position: absolute;
				bottom: 0;
				right: 0;
				font-size: var(--s-3);
				font-style: italic;
				background-color: var(--white);
				border-width: 1px 0 0 1px;
				border-color: var(--darkGray);
				border-style: solid;
				border-radius: var(--s-10) 0 0 0;
				padding: var(--s-10);
			}
		}
	}

	@keyframes cardFlipOpacity {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
</style>
