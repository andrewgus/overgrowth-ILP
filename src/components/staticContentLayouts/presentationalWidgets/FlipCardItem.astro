---
type Props = {
	cardFrontContent: string
	cardBackContent: string
}
const { cardFrontContent, cardBackContent } = Astro.props
---

<script>
	const cards: NodeListOf<HTMLDivElement> =
		document.querySelectorAll('.flipCard')

	const flipTheCard = (e: MouseEvent) => {
		const flipCard = e.currentTarget! as HTMLElement
		const cardFront = flipCard.querySelector('.cardFront') as HTMLSpanElement
		const cardBack = flipCard.querySelector('.cardBack') as HTMLSpanElement

		flipCard.classList.toggle('cardFlipped')
		const isFlipped = flipCard.classList.contains('cardFlipped')

		if (isFlipped) {
			console.log(isFlipped)
			cardFront.classList.add('isHidden')
			cardBack.classList.remove('isHidden')
		} else {
			cardBack.classList.add('isHidden')
			cardFront.classList.remove('isHidden')
		}
	}

	Array.from(cards).forEach((card) => {
		card.addEventListener('click', flipTheCard)
	})
</script>

<button class='flipCard'>
	<span class='cardFront'
		><span class='visuallyHidden'>Card Front:&nbsp;</span>{
			cardFrontContent
		}</span
	>
	<span class='cardBack isHidden'
		><span class='visuallyHidden'>Card Back:&nbsp;</span>{cardBackContent}</span
	>
</button>

<style lang='scss'>
	@use '../../../styles/mixins/buttons.scss';
	@use '../../../styles/mixins/shadows.scss';
	@use '../../../styles/mixins/transitions.scss';
	.flipCard {
		@include buttons.primary();
		@include shadows.blueDropShadow();
		@include transitions.long();
		border-radius: var(--s-10);
		min-height: 10vh;
		min-width: 10vh;
		max-width: max-content;
		background-color: var(--lightBlue);

		> span {
			@include transitions.long();
		}

		&.cardFlipped {
			transform: rotateY(180deg);

			> .cardBack {
				transform: rotateY(-180deg);
			}
		}
	}

	@keyframes cardFlip {
		0% {
			opacity: 1;
		}
		10% {
			opacity: 0;
		}
		11% {
			transform: rotateY(180);
		}
		100% {
			opacity: 1;
		}
	}
</style>
