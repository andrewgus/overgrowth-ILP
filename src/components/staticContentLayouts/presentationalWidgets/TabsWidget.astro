---
/**
 * Creates a tabular widget for presenting content
 * NOTE: make sure to include client:visible, when using any presentationalWidget
 */
import createNanoID from '../../../composables/useCreateNanoID'
import type TabItem from './TabItem.astro'

type Props = {
	title: string
	tabNames: string[]
	children: typeof TabItem | (typeof TabItem)[]
}
const { title, tabNames } = Astro.props

const describedByID = createNanoID(Astro.self.name)
---

<script>
	// FIXME: What is there are multiple .tabs divs? Refactor to consider that as this is run once.
	const tabBtns: NodeListOf<HTMLButtonElement> =
		document.querySelectorAll('.tabs [id^="tab-"]')
	const tabPanels: NodeListOf<HTMLDivElement> = document.querySelectorAll(
		'.tabs [id^="tabpanel-"]'
	)

	const toggleMatchingPanel = (index: number) => {
		tabPanels.forEach((panel, i) => {
			if (index === i) {
				panel?.classList.remove('isHidden')
			} else {
				panel?.classList.add('isHidden')
			}
		})
	}

	tabBtns.forEach((btn, i) => {
		btn.addEventListener('click', (e) => {
			const btnClicked = e.target
			if (!btnClicked) return
			toggleMatchingPanel(i)
		})
	})
</script>

<section class:list={['tabs', 'fullWidth']}>
	<h3 id={describedByID}>{title}</h3>
	<div role='tablist' aria-describedby={describedByID}>
		{
			tabNames.map((tabName, i) => (
				<button
					id={`tab-${i}`}
					aria-selected={i === 1 ? true : false}
					aria-controls={`tabpanel-${i}`}
					type='button'
					role='tab'
				>
					{tabName}
				</button>
			))
		}
	</div>
	{
		tabNames.map((tabName, i) => (
			<div
				id={`tabpanel-${i}`}
				role='tabpanel'
				tabindex='0'
				aria-labelledby={`tab-${i}`}
				class:list={[{ isHidden: i !== 1 }]}
			>
				<slot />
			</div>
		))
	}
</section>

<style lang='scss'>
	.tabs {
	}
	.isHidden {
		display: none;
	}
</style>
