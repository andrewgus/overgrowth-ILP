---
import SubSection from '../a11yElements/SubSection.astro'

/**
 * Horizontally-aligned layout of two text columns. Creates a side-by-side layout for the two.
 */
type PropsWithIsNewSection =
	| {
			isNewSection?: false | undefined
			title?: undefined
	  }
	| {
			isNewSection?: true
			title: string
	  }

type Props = PropsWithIsNewSection & {
	setRatio?: 'r4060' | 'r6040' | 'r5050'
	isFullWidth?: boolean
	isDefinitionList?: boolean
}

const {
	setRatio = 'r5050',
	isFullWidth = false,
	isNewSection = false,
	isDefinitionList = false,
	title,
} = Astro.props
---

{
	() => {
		const containerStyles: string[] = ['sideBySideText', setRatio]
		isFullWidth && containerStyles.push('fullWidth')
		const layout = (
			<Fragment>
				<div class='colA'>
					<slot name='1'>
						<code style='background-color:red'>
							needs element with slot='a' prop
						</code>
					</slot>
				</div>
				<div class='colB'>
					<slot name='2'>
						<code style='background-color:red'>
							needs element with slot='b' prop
						</code>
					</slot>
				</div>
			</Fragment>
		)
		return isNewSection ? (
			<SubSection
				title={title!}
				optionalClass={containerStyles}>
				{layout}
			</SubSection>
		) : isDefinitionList ? (
			<dl class:list={containerStyles}>{layout}</dl>
		) : (
			<div class:list={containerStyles}>{layout}</div>
		)
	}
}

<style lang='scss'>
	.sideBySideText {
		display: flex;
		flex-flow: row wrap;
		align-items: stretch;
		// justify-content: space-between;
		gap: var(--s2);

		> h3 {
			width: 100%;
		}
		> * :global(.subSection) {
			margin-bottom: var(--s2);
		}

		&.r5050 {
			.colA,
			.colB {
				flex: 1 1 25ch;
			}
		}

		&.r6040 {
			.colA {
				flex: 1.5;
			}
			.colB {
				flex: 0 1 auto;
			}
		}
		&.r4060 {
			.colA {
				flex: 0 1 auto;
			}
			.colB {
				flex: 1.5;
			}
		}
	}
</style>
