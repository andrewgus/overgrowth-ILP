---
// NOTE: To be used as a child within the FlipCardWidget component.
type Props = {
	spanTwoCol?: boolean
}
const { spanTwoCol = false } = Astro.props
---

<script>
	const cards = document.querySelectorAll<HTMLDivElement>('.flipCard')

	const flipTheCard = (e: MouseEvent) => {
		const flipCard = e.currentTarget! as HTMLElement
		const cardFront = flipCard.querySelector<HTMLSpanElement>('.cardFront')
		const cardBack = flipCard.querySelector<HTMLSpanElement>('.cardBack')
		const cardInstructions =
			flipCard.querySelector<HTMLSpanElement>('.instructions')

		flipCard.classList.toggle('cardFlipped')
		const isFlipped = flipCard.classList.contains('cardFlipped')

		cardFront?.classList.toggle('isHidden', isFlipped)
		cardBack?.classList.toggle('isHidden', !isFlipped)
		cardInstructions!.style.opacity = '0'
		setTimeout(() => {
			cardInstructions!.style.opacity = '1'
		}, 330)

		cardInstructions!.innerHTML = cardInstructions!.innerHTML.replace(
			/(back|front)/g,
			(match) => {
				return match === 'back' ? 'front' : 'back'
			}
		)
	}

	cards.forEach((card) => {
		card.addEventListener('click', flipTheCard)
	})
</script>

<button class:list={['flipCard', { spanTwoCol: spanTwoCol }]} type='button'>
	<div class='cardFront'>
		<span class='visuallyHidden'>Flip Card Front:&nbsp;</span>
		<slot name='front' />
	</div>
	<div class='cardBack isHidden'>
		<span class='visuallyHidden'>Flip Card Back:&nbsp;</span>
		<slot name='back' />
	</div>
	<div class='instructions'>
		<span class='visuallyHidden'>Instructions:&nbsp;</span>Flip to back?
	</div>
</button>

<style lang='scss'>
	@use '../../../styles/mixins/buttons.scss';
	@use '../../../styles/mixins/shadows.scss';
	@use '../../../styles/mixins/containerStyles.scss';
	.flipCard {
		@include buttons.secondary();
		@include shadows.smallBoxShadow();
		@include containerStyles.flexCenter();
		text-align: left;
		position: relative;
		overflow: hidden;
		border-radius: var(--s-10);
		padding-bottom: var(--s2);
		aspect-ratio: 1/1;

		&:not(.cardFlipped) {
			:global(*) {
				color: var(--white);
			}
			&:hover,
			&:focus {
				:global(*) {
					color: var(--blue);
				}
			}
		}

		&.spanTwoCol {
			grid-column: span 2;
			aspect-ratio: 4/2;
		}

		&:hover {
			> .instructions {
				bottom: 3.5px;
				right: 5px;
			}
		}
		&.cardFlipped {
			transform: rotateY(180deg);
			background-color: var(--offWhite);
			> div {
				transform: rotateY(-180deg);
				&:not(.instructions) {
					color: var(--blue-5);
				}
				&.instructions {
					border-width: 1px 1px 0 0;
					border-radius: 0 var(--s-10) 0 0;
				}
			}
		}
		> div {
			line-height: 1.6;
			-webkit-animation: cardFlipOpacity 0.75s ease-in-out alternate;
			animation: cardFlipOpacity 0.75s ease-in-out alternate;

			&.instructions {
				-webkit-transition: bottom var(--timeShort) ease-in-out,
					right var(--timeShort) ease-in-out;
				transition: bottom var(--timeShort) ease-in-out,
					right var(--timeShort) ease-in-out;
				position: absolute;
				bottom: 0;
				right: 0;
				font-size: var(--s-2);
				font-style: italic;
				background-color: var(--white);
				color: var(--blue);
				border-width: 1px 0 0 1px;
				border-color: var(--darkGray);
				border-style: solid;
				border-radius: var(--s-10) 0 0 0;
				padding: var(--s-10);
			}
		}
	}

	@keyframes cardFlipOpacity {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
</style>
