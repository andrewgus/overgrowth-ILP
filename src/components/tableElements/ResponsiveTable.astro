---
import createNanoID from '../../composables/useCreateNanoID'

type Props = {
	tableTitle: string
	isAttributed?: boolean
}
const { tableTitle, isAttributed = false } = Astro.props

const tableID = createNanoID(Astro.self.name)
---

<script>
	// Grabbing every table
	const tables = Array.from(
		document.querySelectorAll('table[id^="ResponsiveTable"]')
	) as HTMLTableElement[]
	// For each table...
	tables.forEach((table) => {
		// create a map of table headers
		const tableHeaders = Array.from(
			table.querySelectorAll('thead th')
		) as HTMLElement[]
		const headerNames = tableHeaders.map((head) => head.innerHTML)
		// grab all table body and footer rows
		const thisTableRows = Array.from(
			table.querySelectorAll('tbody > tr, tfoot > tr')
		) as HTMLElement[]
		// If there are at least three rows, set class for responsive styles
		thisTableRows.some((row) => {
			row.childElementCount >= 3 &&
				row.closest('table')?.classList.add('bigTable')
		})
		// grab all th and td within each row
		const thisTableDataInRows = thisTableRows.map(
			(row) => Array.from(row.querySelectorAll('th, td')) as HTMLElement[]
		)
		// Set data-headerName value on each row item to its corresponding header
		thisTableDataInRows.forEach((dataInRow, i) => {
			dataInRow.forEach((data, i) => (data.dataset.headerName = headerNames[i]))
		})
	})
</script>

<table
	id={tableID}
	class:list={[{ tableAttributed: isAttributed }]}
	aria-describedby={isAttributed ? `${tableID}-attr` : ''}>
	<caption>
		{tableTitle}
	</caption>
	<thead>
		{
			Astro.slots.has('head') ? (
				<slot name='head' />
			) : (
				<tr>
					<th colspan='1000'>
						ðŸ›‘ Error: missing{' '}
						<code style='background-color:salmon'>
							&lt;TableRow slot="head"&gt; for thead
						</code>
					</th>
				</tr>
			)
		}
	</thead>
	<tbody>
		<slot>
			<tr>
				<td colspan='1000'>
					<p>
						ðŸ›‘ ERROR: Needs
						<code style='background-color:salmon'>
							&lt;TableRow&gt; component</code
						> for <code>tbody</code>.
					</p>
					<p>
						Use <code style='background-color:salmon'>
							&lt;TableRow slot="foot"&gt;</code
						> For <code>tfoot</code>.
					</p>
				</td>
			</tr>
		</slot>
	</tbody>
	{
		Astro.slots.has('foot') && (
			<tfoot>
				<slot name='foot' />
			</tfoot>
		)
	}
</table>
{
	async () => {
		if (isAttributed && Astro.slots.has('attribution')) {
			let html = ''
			html = await Astro.slots.render('attribution')
			return (
				<p id={`${tableID}-attr`}>
					<small set:html={html} />
				</p>
			)
		} else if (isAttributed && !Astro.slots.has('attribution')) {
			return (
				<code style='background-color:salmon'>
					needs &lt;Fragment slot=attribution&gt;
				</code>
			)
		}
	}
}
